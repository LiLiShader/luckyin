{"version":3,"sources":["assets\\scripts\\Hand.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Card from './Card';\nimport Game from './Game';\n\n/**\n * Hand 类表示玩家或庄家的手牌\n */\nexport default class Hand {\n    public cards: Card[] = [];  // 存储当前的手牌\n\n    /**\n     * 添加一张牌到手牌\n     * @param card {Card} 需要添加的牌\n     */\n    addCard(card: Card,isDealer:boolean,pre_card:cc.Prefab,device:string=\"no\"): Promise<void> {\n        return new Promise((resolve) => {\n            // 创建卡牌实例\n            let ins_card = cc.instantiate(pre_card);\n            const startPos = cc.v2(550, 1000); // 牌堆位置\n\n            // 设置父节点\n            if(isDealer){\n                ins_card.parent = cc.find(\"Canvas/Dealer Node\");\n            }else{\n                if(device==\"left\"){\n                    ins_card.parent = cc.find(\"Canvas/Player Node left\");\n                } else if(device==\"right\"){\n                    ins_card.parent = cc.find(\"Canvas/Player Node right\");\n                } else{\n                    ins_card.parent = cc.find(\"Canvas/Player Node\");\n                }\n            }\n\n            // 设置初始位置和随机卡面\n            ins_card.setPosition(startPos);\n            let a=Math.floor(Math.random()*4)\n            ins_card.getChildByName(\"Card\").children[a].active = true;\n\n            // 计算目标位置\n            let targetPos = cc.v2(0, 0);\n            if(ins_card.parent.childrenCount>1){\n                targetPos = cc.v2((ins_card.parent.childrenCount-1)*49,ins_card.parent.children[ins_card.parent.childrenCount-2].getPosition().y-30)\n            }else{\n                targetPos = cc.v2(0,0)\n            }\n\n            // 设置卡牌数值\n\n            cc.find(\"/Card/Label\",ins_card).getComponent(cc.Label).string=this.clickRank(card.rank)\n            if(cc.find(\"Canvas/Game Node\").getComponent(Game).isActive&&isDealer&&cc.find(\"Canvas/Dealer Node\").childrenCount===2){\n                ins_card.setPosition(targetPos);\n                cc.tween(ins_card)\n                        .to(0.2, { scaleX: 0 })\n                        .call(() => {\n                            ins_card.getChildByName(\"CardBack\").active = false;\n                        })\n                        .to(0.2, { scaleX: 1 })\n                        .call(() => {\n                            this.cards.push(card);\n                            resolve(); // 动画完成后解析 Promise\n                        })\n                        .start();\n            }else{\n                // 执行移动动画\n                cc.tween(ins_card)\n                    .to(0.5, { position: cc.v3(targetPos) })\n                    .call(() => {\n                        if(ins_card.parent.childrenCount!=2||ins_card.parent.name!=\"Dealer Node\"){\n                            cc.tween(ins_card)\n                            .to(0.2, { scaleX: 0 })\n                            .call(() => {\n                                ins_card.getChildByName(\"CardBack\").active = false;\n                            })\n                            .to(0.2, { scaleX: 1 })\n                            .call(() => {\n                                this.cards.push(card);\n                                resolve(); // 动画完成后解析 Promise\n                            })\n                            .start();\n                        }else{\n                            cc.find(\"Canvas/Game Node\").getComponent(Game).isActive=true\n                            this.cards.push(card);\n                            resolve();\n                        }\n                    })\n                    .start();\n            }\n        }); \n    }\n    /**\n     * 根据rank数值\n     * 反推牌面\n     */\n    clickRank(rank:number):string{\n        if(cc.find(\"Canvas/playerScoreNode\").active){\n            switch (rank) {\n                case 1:return \"A\"\n                case 11:return \"J\"\n                case 12:return \"Q\"\n                case 13:return \"K\"\n                default:return rank.toString()\n            }\n        }else{\n            switch (rank) {\n                case 1:return \"A\"\n                case 11:return \"J\"\n                case 12:return \"Q\"\n                case 13:return \"K\"\n                default:return rank.toString()\n            }\n        }\n    }\n\n    /**\n     * 计算手牌的总点数\n     * 根据 A 的情况动态调整点数\n     */\n    getScore(): number {\n        let score = 0;\n        let aceCount = 0;\n\n        // 遍历手牌计算总点数\n        this.cards.forEach(card => {\n            score += card.getValue();\n            if (card.isAce()) aceCount++;\n        });\n\n        // 如果点数超过21且有A，则A可以算作1点\n        while (score > 21 && aceCount > 0) {\n            score -= 10;\n            aceCount--;\n        }\n        return score;\n    }\n\n     /**\n     * 获取所有可能的分数列表，考虑 A 的双重值\n     * 如果有 A，返回 [低分, 高分]；没有 A 则返回 [分数]\n     */\n     getPossibleScores(): number[] {\n        let baseScore = 0;\n        let aceCount = 0;\n\n        // 将所有 A 初始计作 1 分，计算基础分数\n        this.cards.forEach(card => {\n            const value = card.isAce() ? 1 : card.getValue();  // A 初始按 1 计算\n            baseScore += value;\n            if (card.isAce()) aceCount++;\n        });\n\n        // 如果没有 A，直接返回唯一的分数\n        if (aceCount === 0) return [baseScore];\n\n        // 如果有 A，计算两种可能的分数\n        const lowScore = baseScore;  // 所有 A 计为 1\n        const highScore = baseScore + 10;  // 将一个 A 计为 11\n\n        // 如果高分数超过 21，只返回低分数；否则返回两种分数\n        return highScore > 21 ? [lowScore] : [lowScore, highScore];\n    }\n\n    /**\n     * 判断是否为 Blackjack（21点）\n     * 如果两张牌总数为 21，即为 Blackjack\n     */\n    isBlackjack(): boolean {\n        return this.cards.length === 2 && this.getScore() === 21;\n    }\n\n    /**\n     * 判断是否爆牌（点数超过 21）\n     */\n    isBust(): boolean {\n        return this.getScore() > 21;\n    }\n\n    /**\n     * 清空手牌\n     */\n    clear(): void {\n        this.cards = [];\n    }\n}\n"]}