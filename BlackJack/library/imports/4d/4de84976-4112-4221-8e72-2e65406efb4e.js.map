{"version":3,"sources":["assets\\scripts\\HttpClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;IAII,oBAAY,OAAe;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,SAAS;IACI,wBAAG,GAAhB,UAAiB,QAAgB,EAAE,MAA4B;uCAAG,OAAO;;;;;wBAC/D,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBAC3B,qBAAM,KAAK,CAAC,GAAG,EAAE;gCAC9B,MAAM,EAAE,KAAK;gCACb,OAAO,EAAE;oCACL,cAAc,EAAE,kBAAkB;iCACrC;6BACJ,CAAC,EAAA;;wBALI,QAAQ,GAAG,SAKf;wBAEF,sBAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAC;;;;KACxC;IAED,UAAU;IACG,yBAAI,GAAjB,UAAkB,QAAgB,EAAE,IAAyB,EAAE,KAAc,EAAE,QAAiB;uCAAG,OAAO;;;;;wBAChG,GAAG,GAAG,KAAG,IAAI,CAAC,OAAO,GAAG,QAAU,CAAC;wBACnC,OAAO,GAAgB;4BACzB,cAAc,EAAE,kBAAkB;yBACrC,CAAC;wBAEF,IAAI,KAAK,EAAE;4BACP,OAAO,CAAC,eAAe,CAAC,GAAG,YAAU,KAAO,CAAC;yBAChD;wBAED,IAAI,QAAQ,EAAE;4BACV,OAAO,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;yBACnC;wBAEgB,qBAAM,KAAK,CAAC,GAAG,EAAE;gCAC9B,MAAM,EAAE,MAAM;gCACd,OAAO,EAAE,OAAO;6BAEnB,CAAC,EAAA;;wBAJI,QAAQ,GAAG,SAIf;wBAEF,sBAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAC;;;;KACxC;IAED,WAAW;IACH,6BAAQ,GAAhB,UAAiB,QAAgB,EAAE,MAA4B;QAC3D,IAAI,GAAG,GAAG,KAAG,IAAI,CAAC,OAAO,GAAG,QAAU,CAAC;QACvC,IAAI,MAAM,EAAE;YACR,IAAM,WAAW,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC3D,GAAG,IAAI,MAAI,WAAa,CAAC;SAC5B;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,OAAO;IACO,mCAAc,GAA5B,UAA6B,QAAkB;uCAAG,OAAO;;gBACrD,sBAAsB;gBACtB,iEAAiE;gBACjE,IAAI;gBACJ,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;KAC1B;IACL,iBAAC;AAAD,CA9DA,AA8DC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class HttpClient {\n    // 基础 URL\n    private baseUrl: string;\n\n    constructor(baseUrl: string) {\n        this.baseUrl = baseUrl;\n    }\n\n    // GET 请求\n    public async get(endpoint: string, params?: Record<string, any>): Promise<any> {\n        const url = this.buildUrl(endpoint, params);\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        return this.handleResponse(response);\n    }\n\n    // POST 请求\n    public async post(endpoint: string, body: Record<string, any>, token?: string, timeZone?: string): Promise<any> {\n        const url = `${this.baseUrl}${endpoint}`;\n        const headers: HeadersInit = {\n            'Content-Type': 'application/json',\n        };\n\n        if (token) {\n            headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        if (timeZone) {\n            headers['time-zone'] = timeZone;\n        }\n\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: headers,\n            // body: JSON.stringify(body),\n        });\n\n        return this.handleResponse(response);\n    }\n\n    // 构建请求 URL\n    private buildUrl(endpoint: string, params?: Record<string, any>): string {\n        let url = `${this.baseUrl}${endpoint}`;\n        if (params) {\n            const queryString = new URLSearchParams(params).toString();\n            url += `?${queryString}`;\n        }\n        return url;\n    }\n\n    // 处理响应\n    private async handleResponse(response: Response): Promise<any> {\n        // if (!response.ok) {\n        //     throw new Error(`HTTP error! status: ${response.status}`);\n        // }\n        return response.json();\n    }\n} "]}